{"ast":null,"code":"// src/useContract.js\nimport { ethers } from 'ethers';\nimport KickstartAbi from './contract/Kickstart.json';\nlet contract;\nasync function getProvider() {\n  if (window.ethereum) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send('eth_requestAccounts', []);\n    return provider;\n  }\n  throw new Error('No Ethereum provider found. Install MetaMask or use a browser with an injected web3 provider.');\n}\nexport async function getContract() {\n  if (!contract) {\n    const provider = await getProvider();\n    const signer = provider.getSigner();\n    const address = process.env.REACT_APP_CONTRACT_ADDRESS;\n    if (!address) {\n      throw new Error('No contract address; set REACT_APP_CONTRACT_ADDRESS in your .env');\n    }\n    contract = new ethers.Contract(address, KickstartAbi, signer);\n  }\n  return contract;\n}","map":{"version":3,"names":["ethers","KickstartAbi","contract","getProvider","window","ethereum","provider","providers","Web3Provider","send","Error","getContract","signer","getSigner","address","process","env","REACT_APP_CONTRACT_ADDRESS","Contract"],"sources":["/home/igord/Blockchain-Project/kickstart-dapp/src/useContract.js"],"sourcesContent":["// src/useContract.js\nimport { ethers } from 'ethers'\nimport KickstartAbi from './contract/Kickstart.json'\n\nlet contract\n\nasync function getProvider() {\n  if (window.ethereum) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    await provider.send('eth_requestAccounts', [])\n    return provider\n  }\n  throw new Error(\n    'No Ethereum provider found. Install MetaMask or use a browser with an injected web3 provider.'\n  )\n}\n\nexport async function getContract() {\n  if (!contract) {\n    const provider = await getProvider()\n    const signer = provider.getSigner()\n    const address = process.env.REACT_APP_CONTRACT_ADDRESS\n    if (!address) {\n      throw new Error(\n        'No contract address; set REACT_APP_CONTRACT_ADDRESS in your .env'\n      )\n    }\n    contract = new ethers.Contract(address, KickstartAbi, signer)\n  }\n  return contract\n}\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,YAAY,MAAM,2BAA2B;AAEpD,IAAIC,QAAQ;AAEZ,eAAeC,WAAWA,CAAA,EAAG;EAC3B,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnB,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAS,CAACC,YAAY,CAACJ,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMC,QAAQ,CAACG,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC9C,OAAOH,QAAQ;EACjB;EACA,MAAM,IAAII,KAAK,CACb,+FACF,CAAC;AACH;AAEA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,IAAI,CAACT,QAAQ,EAAE;IACb,MAAMI,QAAQ,GAAG,MAAMH,WAAW,CAAC,CAAC;IACpC,MAAMS,MAAM,GAAGN,QAAQ,CAACO,SAAS,CAAC,CAAC;IACnC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;IACtD,IAAI,CAACH,OAAO,EAAE;MACZ,MAAM,IAAIJ,KAAK,CACb,kEACF,CAAC;IACH;IACAR,QAAQ,GAAG,IAAIF,MAAM,CAACkB,QAAQ,CAACJ,OAAO,EAAEb,YAAY,EAAEW,MAAM,CAAC;EAC/D;EACA,OAAOV,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}